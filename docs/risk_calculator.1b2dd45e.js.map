{"version":3,"sources":["risk_calculator.js"],"names":["window","numberWithCommas","x","toString","replace","dataTypeBarToText","totalRecordsDisplay","totalRecordsBar","dataTypeBar","dataTypeDisplay","estimatedCostDisplay","estimatedFinesDisplay","estimatedDaysDisplay","MaxDataTotalLossRecords","AvgCostOfDataBreachPerRecord","AvgDaysOfDataBreachRecovery","ShortestBreach","longestBreach","largestGDPRFines","lowestGDPRFine","CCPAPerRecord","NAICFineTotals","doubleExtortion","ConsumerFinancialProtectedDataAvgFine","BusinessCriticalInfraFine","TradeSecretsAvgFine","TradeSecretsAvgLoss","getFines","dataType","numRecords","Math","fineCost","floor","getEstimatedCost","totalCost","getEstimatedDays","showVal","document","getElementById","innerHTML","value"],"mappings":";AACAA,OAAOC,iBAAmB,SAA0BC,GACzCA,OAAAA,EAAEC,WAAWC,QAAQ,wBAAyB,MAGzDJ,OAAOK,kBAAoB,SAA2BH,GAChDA,MAAK,KAALA,EACK,qCACO,KAALA,EACF,2CACO,KAALA,EACF,2CACQ,KAALA,EACH,6BACO,KAALA,EACF,8BACO,KAALA,EACF,sCACO,KAALA,EACF,mCACO,KAALA,EACF,gBACO,KAALA,EACF,+CADF,GAKT,IAAII,EAAsB,KACtBC,EAAkB,KAClBC,EAAc,KACdC,EAAkB,KAClBC,EAAuB,KACvBC,EAAwB,KACxBC,EAAuB,KAGvBC,EAA0B,IAC1BC,EAA+B,IAE/BC,EAA8B,IAC9BC,EAAiB,GACjBC,EAAgB,IAGhBC,EAAmB,KACnBC,EAAiB,IAEjBC,EAAgB,KAEhBC,EAAiB,IAEjBC,EAAkB,IAElBC,EAAwC,QAExCC,EAA4B,EAE5BC,EAAsB,EACtBC,EAAsB,KAE1B1B,OAAO2B,SAAW,SAAkBC,EAAUC,GA2CrCC,OA1CPC,SAAW,EAGK,GAAZH,IAEEC,GAAc,KAASA,GAAc,IACvCE,UAAuB,GAAKF,EACnBA,GAAc,MACvBE,UAAsB,OAKV,GAAZH,IACFG,SAAWF,GAAcX,EAAmBL,IAI9B,GAAZe,IAEFG,SAAWF,EAAaT,EAAgB,GAI1B,GAAZQ,IAEAG,SADEF,GAAc,IACLA,GAAcR,EAAiB,KAE/BA,GAKC,GAAZO,IACFG,SAAW,GAIG,GAAZH,IACFG,SAAWF,GAAcN,EAAwCV,IAG5DiB,KAAKE,MAAMD,WAGpB/B,OAAOiC,iBAAmB,SAA0BL,EAAUC,GAGrDK,OAFPA,UAAYP,SAASC,EAAUC,GAC/BK,WAAyBpB,EAA+Be,EACjDK,WAGTlC,OAAOmC,iBAAmB,SAA0BP,EAAUC,GAExDA,OAAAA,GAAc,IACT,GAAKC,KAAKE,MAAmB,MAAbH,GAIlB,IAAMC,KAAKE,MAAmB,OAAbH,IAG1B7B,OAAOoC,QAAU,WAgBX5B,GAfuB,MAAvBF,IACFC,EAAkB8B,SAASC,eAAe,qBAC1ChC,EAAsB+B,SAASC,eAAe,yBAC9C9B,EAAc6B,SAASC,eAAe,iBACtC7B,EAAkB4B,SAASC,eAAe,qBAC1C5B,EAAuB2B,SAASC,eAAe,0BAC/C3B,EAAwB0B,SAASC,eAAe,2BAChD1B,EAAuByB,SAASC,eAAe,2BAIjD7B,EAAgB8B,UAAYlC,kBAAkBG,EAAYgC,OAC1DlC,EAAoBiC,UAAYtC,iBAAiBM,EAAgBiC,OAGxC,KAArBhC,EAAYgC,MAKd,OAHA9B,EAAqB6B,UAAY,eACjC5B,EAAsB4B,UAAY,IAAMtC,iBAAiB0B,SAASnB,EAAYgC,MAAOjC,EAAgBiC,aACrG5B,EAAqB2B,UAAY,mBAKnC7B,EAAqB6B,UAAY,IAAMtC,iBAAiBgC,iBAAiBzB,EAAYgC,MAAOjC,EAAgBiC,QAG5G7B,EAAsB4B,UAAY,IAAMtC,iBAAiB0B,SAASnB,EAAYgC,MAAOjC,EAAgBiC,QAGrG5B,EAAqB2B,UAAYJ,iBAAiB3B,EAAYgC,MAAOjC,EAAgBiC,OAAS","file":"risk_calculator.1b2dd45e.js","sourceRoot":"../gulp-pre-build","sourcesContent":["\nwindow.numberWithCommas = function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nwindow.dataTypeBarToText = function dataTypeBarToText(x) {\n  if (x == \"1\") {\n    return \"HIPAA Protected Health Information\"\n  } else if (x == \"2\") {\n    return \"GDPR Personally Identifiable Information\"\n  } else if (x == \"3\") {\n    return \"CCPA Personally Identifiable Information\"\n  }  else if (x == \"4\") {\n    return \"NAIC Protected Information\"\n  } else if (x == \"5\") {\n    return \"Double Extortion Ransomware\"\n  } else if (x == \"6\") {\n    return \"Consumers' Financial Protected Data\"\n  } else if (x == \"7\") {\n    return \"Business Critical Infrastructure\"\n  } else if (x == \"8\") {\n    return \"Trade Secrets\"\n  } else if (x == \"9\") {\n    return \"National Security Protected Information\"\n  }\n}\n\nvar totalRecordsDisplay = null\nvar totalRecordsBar = null\nvar dataTypeBar = null\nvar dataTypeDisplay = null\nvar estimatedCostDisplay = null\nvar estimatedFinesDisplay = null\nvar estimatedDaysDisplay = null\n\n// Constants\nvar MaxDataTotalLossRecords = 1000000\nvar AvgCostOfDataBreachPerRecord = 150\n\nvar AvgDaysOfDataBreachRecovery = 279\nvar ShortestBreach = 14\nvar longestBreach = 558\n\n// GDPR\nvar largestGDPRFines = 55000000\nvar lowestGDPRFine = 5000000\n\nvar CCPAPerRecord = 2500\n\nvar NAICFineTotals = 50000\n\nvar doubleExtortion = 50000000\n\nvar ConsumerFinancialProtectedDataAvgFine = 5633802\n\nvar BusinessCriticalInfraFine = 0\n\nvar TradeSecretsAvgFine = 0\nvar TradeSecretsAvgLoss = 300000000000\n\nwindow.getFines = function getFines(dataType, numRecords) {\n  fineCost = 0\n\n  // HIPAA PHI\n  if (dataType == 1) {\n    // HIPAA Enforcement Fine\n    if (numRecords >= 10000 && numRecords <= 100000) {\n      fineCost = fineCost + (26 * numRecords)\n    } else if (numRecords >= 100000) {\n      fineCost = fineCost + 2600000\n    }\n  }\n\n  // GDPR\n  if (dataType == 2) {\n    fineCost = numRecords * (largestGDPRFines / MaxDataTotalLossRecords)\n  }\n\n  // CCPA\n  if (dataType == 3) {\n    // This is just insane, so take 1/4 of the max\n    fineCost = numRecords * CCPAPerRecord / 4\n  }\n\n  // NAIC\n  if (dataType == 4) {\n    if (numRecords <= 50000) {\n      fineCost = numRecords * (NAICFineTotals / 50000)\n    } else {\n      fineCost = NAICFineTotals\n    }\n  }\n\n  // Double Extortion\n  if (dataType == 5) {\n    fineCost = 0\n  }\n\n  // Consumers' Financial Protected Data\n  if (dataType == 6) {\n    fineCost = numRecords * (ConsumerFinancialProtectedDataAvgFine / MaxDataTotalLossRecords)\n  }\n\n  return Math.floor(fineCost)\n}\n\nwindow.getEstimatedCost = function getEstimatedCost(dataType, numRecords) {\n  totalCost = getFines(dataType, numRecords)\n  totalCost = totalCost + (AvgCostOfDataBreachPerRecord * numRecords)\n  return totalCost\n}\n\nwindow.getEstimatedDays = function getEstimatedDays(dataType, numRecords) {\n  // 1-50,000 we setp forward by .0053 days per record\n  if (numRecords <= 50000) {\n    return 14 + Math.floor(numRecords * .0053)\n  }\n\n  // 50,000 - 1,000,000, we step forward by\n  return 279 + Math.floor(numRecords * .000279)\n}\n\nwindow.showVal = function showVal() {\n  if (totalRecordsDisplay == null) {\n    totalRecordsBar = document.getElementById(\"total_records_bar\");\n    totalRecordsDisplay = document.getElementById(\"total_records_display\");\n    dataTypeBar = document.getElementById(\"data_type_bar\");\n    dataTypeDisplay = document.getElementById(\"data_type_display\")\n    estimatedCostDisplay = document.getElementById(\"estimated_cost_display\")\n    estimatedFinesDisplay = document.getElementById(\"estimated_fines_display\")\n    estimatedDaysDisplay = document.getElementById(\"estimated_days_display\")\n  }\n\n  // Update input displays\n  dataTypeDisplay.innerHTML = dataTypeBarToText(dataTypeBar.value)\n  totalRecordsDisplay.innerHTML = numberWithCommas(totalRecordsBar.value)\n\n  // Trade Secrets are a special case.\n  if (dataTypeBar.value == \"8\") {\n\n    estimatedCostDisplay.innerHTML = \"Your Company\"\n    estimatedFinesDisplay.innerHTML = \"$\" + numberWithCommas(getFines(dataTypeBar.value, totalRecordsBar.value))\n    estimatedDaysDisplay.innerHTML = \"Not Recoverable\"\n    return\n  }\n\n  // Compute Costs\n  estimatedCostDisplay.innerHTML = \"$\" + numberWithCommas(getEstimatedCost(dataTypeBar.value, totalRecordsBar.value))\n\n    // Compute Fines\n  estimatedFinesDisplay.innerHTML = \"$\" + numberWithCommas(getFines(dataTypeBar.value, totalRecordsBar.value))\n\n    // Compute Days\n  estimatedDaysDisplay.innerHTML = getEstimatedDays(dataTypeBar.value, totalRecordsBar.value) + \" Days\"\n\n\n\n}"]}